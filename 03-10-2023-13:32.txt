Rangkuman Memahami Kebutuhan Aplikasi
User Requirement Specification (URS) adalah dokumen yang menyimpan informasi mengenai kebutuhan pengguna yang dibuat sebelum proses pengembangan suatu software. Dokumen ini bertujuan agar ketika ada yang membaca dokumen ini maka akan mendapatkan pemahaman yang sama akan kebutuhan user pada aplikasi.

Dokumen User Requirement Specification tidak boleh menggunakan jargon teknis yang hanya dipahami oleh kelompok tertentu, melainkan harus menggunakan bahasa yang bisa dipahami oleh seluruh stakeholder (pemegang kepentingan), seperti manajer, developer, customer, dan user. 

Beberapa teknik requirement gathering yang bisa kita gunakan adalah:

Interview, proses wawancara yang berupa tanya jawab
User Stories, menuliskan kebutuhan user sesuai dengan role dan keinginannya 
Straw Man, menyampaikan ide tanpa menggunakan kode
Prototyping, membuat sampel program yang hanya memiliki fitur-fitur utamanya saja
Spesifikasi Teknis Aplikasi yakni dokumen yang menyimpan informasi detail mengenai fungsionalitas dari sistem/aplikasi, servis, dan juga limitasi-limitasinya.

Beberapa prinsip yang perlu diperhatikan ketika membuat spesifikasi teknis aplikasi seperti berikut:

Clear (jelas)
Unambiguous (tidak ambigu)
Mudah dipahami
Complete (lengkap)
Consistent (konsisten)
Dalam proses pembuatan spesifikasi teknis aplikasi kita perlu mempertimbangkan kebutuhan dari berbagai macam stakeholder. Berikut pandangan beberapa stakeholder terkait spesifikasi teknis:

Developer
Dari sisi developer tentunya yang diperlukan ada kedetailan dan kejelasan spesifikasi. Karena merekalah yang akan mengimplementasinya ke dalam aplikasi.

Client/User
Dari sisi client meskipun spesifikasi teknis lebih mengarah ke teknis akan tetapi mereka berharap tetap bisa dimengerti. Dalam artian istilah teknis yang dipakai harus bisa dibuat semudah mungkin untuk dimengerti.

Legal
Karena spesifikasi teknis ini bisa menjadi kontrak, maka perlu memasukkan acceptance criteria dengan jelas juga. Acceptance criteria adalah klausul kriteria yang berisi apakah suatu fitur sudah berjalan dengan baik. Jika aplikasi yang dibuat lulus semua acceptance criteria maka seharusnya tidak ada masalah dari sisi kontrak/legal.
Dalam mengembangkan aplikasi, sebaiknya disiapkan juga plan B atau contingency plan. Contingency plan adalah suatu tindakan alternatif yang dipersiapkan ketika tindakan utama yang direncanakan untuk melakukan sesuatu gagal atau terhambat oleh berbagai faktor.

Berikut pokok-pokok bahasan materi yang akan Anda pelajari, seperti:

Mengetahui spesifikasi kebutuhan aplikasi perangkat lunak, beserta studi kasusnya.
Mengetahui cara aplikasi perangkat lunak bekerja dalam komputer
Menyelesaikan masalah menggunakan cara berpikir sebuah aplikasi, beserta studi kasusnya.
Mengetahui istilah flowchart, beserta studi kasusnya.
Serta mengetahui tips sikap kerja dalam kolaborasi perencanaan aplikasi dengan tim.


Spesifikasi Kebutuhan Perangkat Lunak dan Struktur Penulisannya
  

Transkrip

Apa itu Dokumen SKPL?
Pernahkah Anda mendengar istilah Spesifikasi Kebutuhan Perangkat Lunak (SKPL) atau juga bisa disebut dengan Software Requirement Specification (SRS)? Jika belum, tenang saja. Kita akan mengulasnya secara detail disertai studi kasus untuk memperkuat pemahaman Anda.

Spesifikasi Kebutuhan Perangkat Lunak (SKPL) adalah sebuah dokumen yang dibuat sebelum mengembangkan sebuah aplikasi perangkat lunak. Dokumen ini menjelaskan cara kerja dan kebutuhan fungsional maupun non-fungsional dari aplikasi yang digunakan pengguna nantinya. 

Bukan hanya itu saja, berikut keuntungan yang bisa didapatkan dari pembuatan dokumen Spesifikasi Kebutuhan Perangkat Lunak:

Keuntungan pertama adalah seorang desainer UI/UX dalam tim akan mendapat gambaran sehingga mereka dapat mendesain sesuai kebutuhan aplikasi.
Selain desainer, tim penguji aplikasi (tester) akan mendapatkan panduan untuk membuat studi kasus dalam proses pengujian aplikasi.
Bukan hanya dari sisi internal tim saja, pengguna akhir (end user) juga akan mendapatkan gambaran umum terkait aplikasi yang akan dibuat.
Bahkan, dari sisi investor juga akan mendapatkan gambaran umum terkait fitur apa saja yang ada di dalam aplikasi. Sehingga, membantu mereka untuk mengambil keputusan untuk investasi atau tidak.
Kita telah mengetahui dokumen Spesifikasi Kebutuhan Perangkat Lunak (SKPL) memiliki banyak keuntungan bagi tim pengembang aplikasi, pengguna, hingga pihak investor. Sehingga, sebuah dokumen SKPL harus memiliki informasi yang cukup untuk memenuhi semua kebutuhan dari pihak-pihak yang memiliki kepentingan tersebut.

Berikut cakupan elemen yang ada dalam dokumen Spesifikasi Kebutuhan Perangkat Lunak:

Mulai dari tujuan aplikasi;
deskripsi umum;
kebutuhan fungsional dan non fungsional;
performa aplikasi dalam proses produksi;
antarmuka eksternal atau bagaimana sebuah aplikasi berinteraksi dengan perangkat keras dan perangkat lunak lainnya;
hingga batasan sistem aplikasi yang akan dibuat.
Dari beberapa elemen tersebut mungkin Anda ingin bertanya, apa perbedaan dari kebutuhan fungsional dan non fungsional? 

Kebutuhan fungsional menggambarkan cara sistem membantu menyelesaikan tugas atau kebutuhan pengguna ketika menggunakan aplikasi. Kebutuhan fungsional ini sama halnya dengan fitur yang ditawarkan aplikasi untuk pengguna. Misalnya, dalam aplikasi pesan antar makanan secara daring adalah fitur yang memungkinkan pengguna dapat memilih menu yang tersedia di suatu restoran. Tanpa terpenuhinya kebutuhan fungsional dalam dokumen SKPL, sama halnya dengan Anda meniadakan fungsi atau fitur dari sebuah aplikasi.

Sedangkan kebutuhan non fungsional berguna untuk mendukung kebutuhan fungsional yang sudah ada. Tanpa adanya persyaratan non fungsional, sistem aplikasi masih bisa berjalan untuk memenuhi kebutuhan pengguna.

Walaupun begitu, kebutuhan non fungsional juga tetap harus diperhatikan karena dapat mempengaruhi pengalaman pengguna (user experience) ketika menggunakan aplikasi. Karena berfokus pada kenyamanan pengguna, biasanya persyaratan non fungsional ini meliputi kinerja, keandalan, keamanan, dan kegunaan dari aplikasi itu sendiri. Contohnya, ketika pengguna berhasil memesan makanan secara daring, pihak pengemudi (driver) yang mengantarkan makanan hanya dapat menghubungi pengguna melalui fitur chat yang disediakan oleh aplikasi. Sehingga, keamanan nomor pribadi pengguna akan terjamin dan tidak diketahui oleh siapa pun.

Setelah membahas panjang lebar mengenai dokumen SKPL, kira-kira bagaimana ya cara untuk membuat dokumen SKPL? Mari kita lanjutkan pembahasan ke struktur penulisan dokumen SKPL.



Struktur Penulisan Dokumen SKPL
Mengingat bahwa dokumen SKPL ini memiliki beragam pengguna, mulai dari tim manajemen, tim pengembang, hingga pengguna akhir (pelanggan dari sistem), Anda harus membuatnya secara terstruktur dan jelas. Sehingga, Anda perlu mendeskripsikan kebutuhan untuk pengguna, menjelaskan secara rinci untuk tim pengembang dan penguji, serta menambahkan informasi tentang kemungkinan pengembangan aplikasi di masa mendatang.

Anda juga dapat mengacu pada standar IEEE 1998 untuk menulis dokumen Spesifikasi Kebutuhan Perangkat Lunak. Standar ini dapat Anda sesuaikan kembali bergantung pada kebutuhan aplikasi atau perangkat lunak yang ingin dikembangkan. Untuk lebih jelasnya, simak tabel berikut ini:

Bab	Deskripsi
Pengantar

Menjelaskan secara singkat fungsi dari sistem yang dibuat dan cara kerja aplikasi. Selain itu juga menjelaskan tujuan dari aplikasi yang akan dibuat.

Glosarium

Berisi definisi istilah-istilah teknis yang ada dalam dokumen.

Kebutuhan Pengguna

Menjelaskan secara umum layanan yang disediakan sistem untuk pengguna. Deskripsi yang ada bisa menggunakan narasi biasa atau diagram supaya dapat dimengerti.

Sistem Arsitektur

Menjelaskan gambaran tingkat tinggi (high level overview) dari sistem arsitektur yang digunakan dalam aplikasi.

Spesifikasi Kebutuhan Sistem

Menjelaskan secara lebih rinci tentang kebutuhan fungsional dan non fungsional dari aplikasi yang akan dibuat. Selain itu jika sistem memiliki antarmuka dengan sistem atau perangkat keras lain juga dapat ditambahkan di sini.

Model Sistem

Menjelaskan object model, data-flow models, atau semantic data models yang digunakan dalam aplikasi.

Rencana Pengembangan Sistem

Menjelaskan asumsi Anda terkait rencana pengembangan sistem di masa depan. Bagian ini akan berguna bagi desainer aplikasi untuk tidak membatasi idenya untuk kemungkinan pengembangan sistem.

Apendiks

Menjelaskan detail tambahan yang mendukung pengembangan aplikasi

Setelah mengetahui contoh struktur dokumen SKPL di atas, mungkin Anda bertanya, Bagaimana cara menuliskannya secara langsung ke dalam dokumen SKPL? Simak uraian studi kasusnya di materi berikutnya.